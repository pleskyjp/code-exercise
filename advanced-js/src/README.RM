## Exercise 1

The first exercise focuses on types and working with an unspecified number of parameters in the function.
The goal is to process each parameter and create an object with the following attributes:
isFalsy = determine if the value is in JS determined as falsy or not
type = what data type value is
stringLength = what is the length of the value if it is converted to the string
index = position of value in parameters, starting from zero
limitations:
you are not allowed to use Boolean() method to determine, if the value is falsy

## Exercise 2

The code usually consists of multiple files, so let's make sure, that you know how to load code from another file.
In this exercise, you are supposed to implement a simple validation mechanism.
It works the way, that you have two objects which share the same keys. Values in the first one are functions that will return true/false based on the input from the second object if it matches that data type.
Those functions are loaded from another file.
Validate function, that performs the actual validation simply go through the set of keys of these objects and calls those functions with values. Validate function returns an array of invalid keys.
create those two files which are supposed to be loaded:

## Exercise 3

Most of the time, you will use classes as a data structure, so it is crucial to make sure, that you know how to use them, therefore let's try to implement three classes with inheritance. 
class Person:
constructor accepts two parameters:
state ("active" as default value)
uid ("0-0" as default value)
instance methods:
getState() -> returns state
setState(value) -> sets the state to the instance
only "active" and "inactive" values are allowed, otherwise it throws an exception
getUid() -> return uuIdentity
class methods (static):
getCountOfPersons() -> return total count of created persons


class Human
inherits from Person
constructor accepts four parameters: name, age, state, uid
instance methods:
getName() -> returns name
sayHello() -> returns "Hello from ${name}"

class Uuee
inherits from Person
constructor accepts three parameters: owner, state, uid
check that owner is instance of Human, otherwise throw an exception
instance methods:
sayHello(caller) -> if the caller is the owner (same instance), it returns: "Hello ${ownerName}", otherwise returns "No!" 

## Exercise 4

Let's extend working with classes by using the Factory pattern to produce cars:
class Factory:
the constructor accepts energy as a parameter 
store this energy on the instance
store reference to the warehouse on the instance with getter (getWarehouse())
class has following methods:
produceCar(color = "red", wheels = 4, engine = false)
at first, check that you have enough power to create a new car (2 power per car), otherwise return null
store created instance of class Car in the warehouse
addEnergyPower(value=0)
add energy to factory
changeCarColor(car, newColor="blue")
at first, check that you have enough power to change the color (1 power per car), and change the color of a car, otherwise return null


class Car
the constructor accepts parameters: color, wheels and engine
class has getters and setters for all these 3 parameters
getColor(), setColor(),..

Warehouse
warehouse is a simple object with nested array
this structure is stored in another file

## Exercise 5 and 6
Lets practice callbacks, if you fully understand how they work, you should be able to modify following codes, so they will return always characters in alphabetical order.

## Exercise 7 and 8
Lets practice promises, if you fully understand how they work, you should be able to modify following codes, so they will return always characters in alphabetical order.

## Exercise 9 and 10
Lets practice async/await, if you fully understand how they work, you should be able to modify following codes, so they will return always characters in alphabetical order.

## Exercise 11
Let's practies working with file system by creating storage for books.
Create class with methods:
async createBook(book)
asnyc getBook(code)
each book contains at least code, name and author 
Books are stored in JSON format inside of books.json.
Use JSON.parse() and JSON.stringify() for working with JSON.
Use async API fs.promises.readfile() and fs.promises.writeFile()
Book code must be uniqe, check when saving (eventualy throw an exception with code "DUPLICATE_CODE")

## Exercise 12
Implement API Server to create and load book using Express.js.
Use storage from previous exercise.
API:
getBook 
HTTP method GET
return the book by query parameter
errors:
Code attribute not assigned (status 400)
Book with the specified code does not exist (status 400)
createBook
HTTP method POST
Stores a book with parameters sent in request body
errors:
No attribute code, name or author specified (status 400)
the book already exists in the database - duplicate code (status 400)
Unexpecter error (status 500)
Implement cache for books using lru-cache library. The cache can contain up to 10 records.